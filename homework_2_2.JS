//undefined при перетворенні в число дає NaN
undefined + 1;//NaN

//ліва частина залишається рядком, права перетворюється на 1
'true' == true//false

//ліва частина перетворюється на 0, права залишається рядком
false == 'false'//false

//при нестрогому порівнянні null дорівнює лише undefined і більше нічому
null == ''//false

//спочатку виконується те, що в дужках, потім возводится в степень
3 ** (9 / 3);//27

//!!використовується для перетворення на булевий тип, рядок перетворюється в true, отримуємо true == true
!!'false' == !!'true'//true

//&& має приоритет над ||, тому права частина дасть 1, т.я. булеві знвчення '0' та 1 - true, ліва частина дасть false при перетворенні
0 || '0' && 1// 1

//зліва направо порівнюються числа
1 < 2 < 3// true

//т.я. рядки залишається рядками при конкатенації , перше слово буде рядком, друге слово при перетворенні  за допомогою + на число дасть NaN, далі конкатенуються
'foo'+ + +'bar'//'fooNaN'

//аріфметичні операції з числами зліва на право
3 ** 2 / 3;//3

//друга частина виразу невірна
1 < 2 > 3//false

//+null перетворюється в число 0, при == перетворюється в булеве значення false, тому в дужках отримуємо true
// true перетворюється на 1, тому порівняння невірне 
(+null == false) < 1;//false

//&& має приоритет над ||, ліва частина дасть false, потім false || true дасть, т.я. одне з значень є правдивим
false && true || true//true

//() мають пріоритет, тому виконається спочатку ||, що дасть true, 
false && (true || true);//false

//+null перетворюється в число 0, при == перетворюється в булеве значення false, тому в дужках отримуємо true
// true перетворюється на 1, тому порівняння невірне 
(+null == false) < 1 ** 5;//true